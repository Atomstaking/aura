// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: feegrant/v1beta1/feegrant.proto

package feegrant

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AllowedContractAllowance creates allowance only for specified contract address.
type AllowedContractAllowance struct {
	// allowance can be any of basic and periodic fee allowance.
	Allowance *types.Any `protobuf:"bytes,1,opt,name=allowance,proto3" json:"allowance,omitempty"`
	// allowed_address are the addresses for which the grantee has the access.
	AllowedAddress []string `protobuf:"bytes,2,rep,name=allowed_address,json=allowedAddress,proto3" json:"allowed_address,omitempty"`
}

func (m *AllowedContractAllowance) Reset()         { *m = AllowedContractAllowance{} }
func (m *AllowedContractAllowance) String() string { return proto.CompactTextString(m) }
func (*AllowedContractAllowance) ProtoMessage()    {}
func (*AllowedContractAllowance) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac5add8dbed320b7, []int{0}
}
func (m *AllowedContractAllowance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllowedContractAllowance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllowedContractAllowance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllowedContractAllowance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllowedContractAllowance.Merge(m, src)
}
func (m *AllowedContractAllowance) XXX_Size() int {
	return m.Size()
}
func (m *AllowedContractAllowance) XXX_DiscardUnknown() {
	xxx_messageInfo_AllowedContractAllowance.DiscardUnknown(m)
}

var xxx_messageInfo_AllowedContractAllowance proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AllowedContractAllowance)(nil), "cosmos.feegrant.v1beta1.AllowedContractAllowance")
}

func init() { proto.RegisterFile("feegrant/v1beta1/feegrant.proto", fileDescriptor_ac5add8dbed320b7) }

var fileDescriptor_ac5add8dbed320b7 = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xc1, 0x4a, 0x33, 0x31,
	0x14, 0x85, 0x27, 0xff, 0x0f, 0x42, 0x47, 0x54, 0x2c, 0x15, 0x6b, 0x17, 0x69, 0x71, 0xd3, 0x6e,
	0x9a, 0x50, 0xdd, 0xb9, 0x9b, 0x8a, 0x82, 0xdb, 0x2e, 0xdd, 0x94, 0x3b, 0x99, 0x34, 0x0e, 0x74,
	0x72, 0x4b, 0x92, 0xb1, 0xf4, 0x0d, 0x5c, 0xfa, 0x08, 0xfa, 0x0e, 0x3e, 0x84, 0xb8, 0x2a, 0xae,
	0x5c, 0x4a, 0xfb, 0x22, 0xe2, 0x64, 0x66, 0x84, 0xae, 0x92, 0x73, 0xee, 0x39, 0x5f, 0x2e, 0x24,
	0xec, 0xce, 0xa4, 0x54, 0x06, 0xb4, 0xe3, 0x8f, 0xa3, 0x58, 0x3a, 0x18, 0xf1, 0xca, 0x60, 0x0b,
	0x83, 0x0e, 0x9b, 0xa7, 0x02, 0x6d, 0x86, 0x96, 0xd5, 0x76, 0x99, 0xeb, 0xb4, 0x14, 0x2a, 0x2c,
	0x32, 0xfc, 0xf7, 0xe6, 0xe3, 0x9d, 0x33, 0x85, 0xa8, 0xe6, 0x92, 0x17, 0x2a, 0xce, 0x67, 0x1c,
	0xf4, 0xaa, 0x1a, 0x79, 0xd2, 0xd4, 0x77, 0x4a, 0xac, 0x1f, 0x51, 0xaf, 0x78, 0x0c, 0x56, 0xd6,
	0x8b, 0x08, 0x4c, 0x75, 0x39, 0xef, 0xee, 0x52, 0x5d, 0x9a, 0x49, 0xeb, 0x20, 0x5b, 0x54, 0x80,
	0xdd, 0x40, 0x92, 0x1b, 0x70, 0x29, 0x96, 0x80, 0xf3, 0x57, 0x12, 0xb6, 0xa3, 0xf9, 0x1c, 0x97,
	0x32, 0xb9, 0x46, 0xed, 0x0c, 0x08, 0x57, 0x48, 0xd0, 0x42, 0x36, 0x6f, 0xc2, 0x06, 0x54, 0xa2,
	0x4d, 0x7a, 0x64, 0xb0, 0x7f, 0xd1, 0x62, 0x1e, 0xc8, 0x2a, 0x20, 0x8b, 0xf4, 0x6a, 0x7c, 0xfc,
	0xf1, 0x36, 0x3c, 0xb8, 0x95, 0xb2, 0xae, 0xde, 0x4d, 0xfe, 0x9a, 0xcd, 0x7e, 0x78, 0x04, 0xfe,
	0x89, 0x29, 0x24, 0x89, 0x91, 0xd6, 0xb6, 0xff, 0xf5, 0xfe, 0x0f, 0x1a, 0x93, 0xc3, 0xd2, 0x8e,
	0xbc, 0x7b, 0x75, 0xf2, 0xf4, 0xd2, 0x0d, 0x3e, 0x77, 0x51, 0xe3, 0xe8, 0x7d, 0x43, 0xc9, 0x7a,
	0x43, 0xc9, 0xf7, 0x86, 0x92, 0xe7, 0x2d, 0x0d, 0xd6, 0x5b, 0x1a, 0x7c, 0x6d, 0x69, 0x70, 0xdf,
	0x57, 0xa9, 0x7b, 0xc8, 0x63, 0x26, 0x30, 0xe3, 0x90, 0x1b, 0x18, 0xea, 0x65, 0x71, 0x72, 0x91,
	0x5b, 0x87, 0x59, 0xfd, 0x65, 0xf1, 0x5e, 0xb1, 0xee, 0xe5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x08, 0x20, 0x17, 0x78, 0xd6, 0x01, 0x00, 0x00,
}

func (m *AllowedContractAllowance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllowedContractAllowance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllowedContractAllowance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllowedAddress) > 0 {
		for iNdEx := len(m.AllowedAddress) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedAddress[iNdEx])
			copy(dAtA[i:], m.AllowedAddress[iNdEx])
			i = encodeVarintFeegrant(dAtA, i, uint64(len(m.AllowedAddress[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Allowance != nil {
		{
			size, err := m.Allowance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFeegrant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFeegrant(dAtA []byte, offset int, v uint64) int {
	offset -= sovFeegrant(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AllowedContractAllowance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Allowance != nil {
		l = m.Allowance.Size()
		n += 1 + l + sovFeegrant(uint64(l))
	}
	if len(m.AllowedAddress) > 0 {
		for _, s := range m.AllowedAddress {
			l = len(s)
			n += 1 + l + sovFeegrant(uint64(l))
		}
	}
	return n
}

func sovFeegrant(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFeegrant(x uint64) (n int) {
	return sovFeegrant(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AllowedContractAllowance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeegrant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllowedContractAllowance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllowedContractAllowance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allowance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeegrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeegrant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFeegrant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Allowance == nil {
				m.Allowance = &types.Any{}
			}
			if err := m.Allowance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeegrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeegrant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeegrant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedAddress = append(m.AllowedAddress, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeegrant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeegrant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFeegrant(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFeegrant
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeegrant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeegrant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFeegrant
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFeegrant
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFeegrant
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFeegrant        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFeegrant          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFeegrant = fmt.Errorf("proto: unexpected end of group")
)
